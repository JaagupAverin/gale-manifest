import textwrap
from pathlib import Path

from gale import log
from gale.data.projects import MANIFEST_PROJECT
from gale.data.structs import BuildCache
from gale.util import CmdMode, run_command


def task_generate_clangd_file(cache: BuildCache) -> None:
    """Writes a .clangd file for the given build cache in gale root directory, in order to benefit LSPs."""
    clangd_file_content = textwrap.dedent(f"""
    # This file is auto-generated by gale for the latest built target ({cache.triplet}).
    CompileFlags:
      CompilationDatabase: {cache.build_dir}
      Add: -Wno-unknown-warning-option
      Remove: [-m*, -f*]
    """)

    clangd_file_path = MANIFEST_PROJECT.dir / ".clangd"
    log.inf(f"Generating .clangd file at {clangd_file_path}")
    with clangd_file_path.open("w") as file:
        file.write(clangd_file_content)


def common_post_build_task(cache: BuildCache) -> None:
    """Common post-build steps for most targets."""
    task_generate_clangd_file(cache)


def common_run_task(cache: BuildCache, extra_args: list[str] | None) -> None:
    args: str = " ".join(extra_args) if extra_args else ""

    if cache.board.is_bsim:
        exe: Path = Path(cache.cmake_cache.exe_path)
        if not exe.exists():
            log.fatal(f"Output binary '{exe}' does not exist; use build first.")

        run_cmd: str = f"{exe} -nosim {args}"
        run_command(
            cmd=run_cmd,
            desc=f"Running '{cache.triplet}' natively",
            mode=CmdMode.REPLACE,
        )
    else:
        log.fatal("Direct running on board not yet implemented.")


def common_debug_task(cache: BuildCache, extra_args: list[str] | None) -> None:
    args: str = " ".join(extra_args) if extra_args else ""

    if cache.board.is_bsim:
        exe: Path = Path(cache.cmake_cache.exe_path)
        if not exe.exists():
            log.fatal(f"Output binary '{exe}' does not exist; use build first.")

        run_cmd: str = f"{exe} -nosim {args}"
        dbg_cmd: str = f"{cache.cmake_cache.gdb} --tui --args {run_cmd}"
        run_command(cmd=dbg_cmd, desc=f"Debugging '{cache.triplet}' natively", mode=CmdMode.REPLACE)
    else:
        log.fatal("Direct debugging on board not yet implemented.")
